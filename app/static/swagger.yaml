swagger: "2.0"
info:
  title: "Library API"
  description: "API to manage a Library system"
  version: "1.0.0"

host: "https://library-erd-2.onrender.com"
schemes:
  - "https"

consumes:
  - "application/json"
produces:
  - "application/json"

securityDefinitions:
  bearerAuth:
    type: apiKey
    name: Authorization
    in: header 

paths:
  /members/login:
    post:
      tags:
        - Members
      summary: "Login endpoint (generates token)"
      description: "Validates member credentials, generates and returns a member-specific token."
      parameters:
        - in: "body"
          name: "body"
          description: "Login Credentials"
          required: true
          schema:
            $ref: "#/definitions/LoginCredentials"
      responses:
        200:
          description: "Successful Login"
          schema:
            $ref: "#/definitions/LoginResponse"
          examples:
            application/json:
              token: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9..."
              message: "Login successful"
              status: "success"

  /members:
    post:
      tags:
        - Members
      summary: "Endpoint to create/register a new user."
      description: "Endpoint to create a new member in our Library system. Emails must be unique."
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to create a new Member."
          required: true
          schema:
            $ref: "#/definitions/CreateMemberPayload"
      responses:
        200:
          description: "Successful Created Member"
          schema:
            $ref: "#/definitions/CreateMemberResponse"
          examples:
            application/json:
              id: 1
              name: "John Doe"
              DOB: "1900-01-01"
              email: "johnd@email.com"
              password: "password123"

    get:
      tags:
        - Members
      summary: "Returns all members."
      description: "Endpoint to retrieve a list of all members."
      responses:
        200:
          description: "Retrieved Members Successfully"
          schema:
            $ref: "#/definitions/AllMembers"

    put:
      tags:
        - Members
      summary: "Endpoint to update an existing member."
      description: "Endpoint to update an existing member, this token authenticated route, and the user must be logged in to update their account."
      security:
        - bearerAuth: []
      parameters:
        - in: "body"
          name: "body"
          description: "Information required to update a Member."
          required: true
          schema:
            $ref: "#/definitions/UpdateMemberPayload"
      responses:
        200:
          description: "Successful Member Update"
          schema:
            $ref: "#/definitions/UpdateMemberResponse"
          examples:
            application/json:
              id: 1
              name: "John Doe"
              email: "johnd@email.com"
              DOB: "1900-01-01"
              password: "newpassword123"

     delete:
      tags:
        - Members
      summary: "Enpoint to delete a member"
      description: "Endpoint to delete a member. Requires token authentication, member must be logged in to delete their account"
      security:
       - bearerAuth: []
      responses:
        200:
          description: "Successfully Deleted member"           
          schema:
            $ref: "#/definitions/DeleteMemberResponse"
          examples:
            application/json:
              message: "successfully deleted user <member_id>."

definitions:
  LoginCredentials:
    type: "object"
    properties:
      email:
        type: "string"
      password:
        type: "string"
    required:
      - email
      - password

  LoginResponse:
    type: "object"
    properties:
      token:
        type: "string"
      message:
        type: "string"
      status:
        type: "string"

  CreateMemberPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      DOB:
        type: "string"
        format: "date"
      password:
        type: "string"
    required:
      - name
      - email
      - DOB
      - password

  CreateMemberResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      DOB:
        type: "string"
      password:
        type: "string"

  AllMembers:
    type: "array"
    items:
      type: "object"
      properties:
        id:
          type: "integer"
        name:
          type: "string"
        email:
          type: "string"
        DOB:
          type: "string"
        password:
          type: "string"

    UpdateMemberPayload:
    type: "object"
    properties:
      name:
        type: "string"
      email:
        type: "string"
      DOB:
        type: "string"
        format: "date"
      password:
        type: "string"
      
    required:
      - name
      - email
      - DOB
      - password


  UpdateMemberResponse:
    type: "object"
    properties:
      id:
        type: "integer"
      name:
        type: "string"
      email:
        type: "string"
      DOB:
        type: "string"
      password:
        type: "string"    


  DeleteMenberResponse:
    type: "object"
    properties:
      message:
        type: "string"
            
